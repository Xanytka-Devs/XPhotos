<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:XPhotos"
                    x:Class="XPhotos.Styles">

    <!--CONTROL STYLES-->

    <Style TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                          HorizontalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Black"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.125"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransparentTB"  TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="FontFamily" Value="Bahnschrift Light"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="CaretBrush" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                            Padding="2"
                            BorderThickness="1"
                            UseLayoutRounding="True" CornerRadius="6"
                            BorderBrush="Transparent">
                        <Grid>
                            <Border Name="EffectBorder"
                            Padding="2"
                            BorderThickness="1"
                            UseLayoutRounding="True" CornerRadius="6"
                            BorderBrush="Transparent"/>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="EffectBorder" Value="Black"/>
                            <Setter Property="Opacity" TargetName="EffectBorder" Value="0.125"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Name="Border"
                            BorderThickness="1"
                            UseLayoutRounding="True"
                            CornerRadius="5"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Background="{x:Static local:ThemeManager.LightSelectBrush}" 
                            BorderBrush="{x:Static local:ThemeManager.LightSelectBrush}">
                        <ContentPresenter Margin="4"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="CornerRadius"
                                    Value="4" />
                            <Setter TargetName="Border" Property="SnapsToDevicePixels"
                                    Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
    </Style>-->

    <Style x:Key="WindowCloseBtn" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#F44336"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SmallBtn" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                          HorizontalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{x:Static local:ThemeManager.SelectBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowControlBtn" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{x:Static local:ThemeManager.LightSelectBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BigButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{x:Static local:ThemeManager.ThematicBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                          HorizontalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{x:Static local:ThemeManager.SelectThematicBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{x:Static local:ThemeManager.DarkThematicBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{x:Static local:ThemeManager.SelectThematicBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MWBtn" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                          HorizontalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{x:Static local:ThemeManager.LighterSelectBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{x:Static local:ThemeManager.LighterSelectBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{x:Static local:ThemeManager.LighterSelectBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="FontFamily" Value="Bahnschrift Light"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="CaretBrush" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                            Padding="2"
                            BorderThickness="1"
                            Background="{x:Static local:ThemeManager.SemiLightSelectBrush}" UseLayoutRounding="True" CornerRadius="6"
                            BorderBrush="Transparent">
                        <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"
                                    Value="{x:Static local:ThemeManager.LightSelectBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"
                                    Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DescriptionBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="FontFamily" Value="Bahnschrift Light"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="CaretBrush" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                            Padding="2"
                            BorderThickness="1"
                            Background="Transparent" UseLayoutRounding="True" CornerRadius="6"
                            BorderBrush="Transparent">
                        <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"
                                    Value="{x:Static local:ThemeManager.LightSelectBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background"
                                    Value="{x:Static local:ThemeManager.SelectBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="checkBg"
                                Grid.Column="0"
                                CornerRadius="2"
                                Margin="1"
                                Background="Transparent"
                                BorderBrush="{x:Static local:ThemeManager.LighterSelectBrush}"
                                BorderThickness="2"/>
                        <Image x:Name="arrow" Source="/Images/cmark.png"
                               Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" 
                                    TargetName="arrow" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="checkBg"
                                    Value="{x:Static local:ThemeManager.LighterSelectBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="checkBg"
                                    Value="{x:Static local:ThemeManager.SelectBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PopupContentStyle" TargetType="ContentControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid Width="Auto" Height="Auto" Background="Gray">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border BorderThickness="2" CornerRadius="8" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2">
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Gray"/>
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="White"/>
                            </Border.Background>
                        </Border>

                        <StackPanel Grid.Row="0">
                            <Label Foreground="Blue" Content="Popup_Title"/>
                        </StackPanel>

                        <GroupBox Grid.Row="1" Header="Popup example content">
                            <StackPanel>
                                <ContentPresenter />
                            </StackPanel>
                        </GroupBox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Rectangle Height="1" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Background="Transparent">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>
                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{x:Static local:ThemeManager.FontBrush}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>
                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>
                            <!-- Content for the menu IGT -->
                            <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>
                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>
                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false">
                                <Border x:Name="SubMenuBorder" Background="Transparent">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <Border Background="{x:Static local:ThemeManager.LightSelectBrush}" CornerRadius="5" Padding="2,2,2,2">
                                            <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Border>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Background" Value="{x:Static local:ThemeManager.LightSelectBrush}"/>
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Background" Value="{x:Static local:ThemeManager.LightSelectBrush}"/>
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="Background" Value="{x:Static local:ThemeManager.LightSelectBrush}"/>
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>
                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="Background" Value="{x:Static local:ThemeManager.LightSelectBrush}"/>
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>
                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>
                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>
                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{x:Static local:ThemeManager.LighterSelectBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{x:Static local:ThemeManager.FontBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{x:Static local:ThemeManager.DisabledFontBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--WINDOW STYLES-->

    <Style x:Key="XPhotosWindow" TargetType="{x:Type Window}">
        <Setter Property="BorderBrush" Value="{x:Static local:ThemeManager.WindowBrush}"/>
        <Setter Property="Background" Value="{x:Static local:ThemeManager.WindowBrush}"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CornerRadius="6,6,6,6"
                    ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"
                    GlassFrameThickness="0" CaptionHeight="20"
                    NonClientFrameEdges="None"
                    UseAeroCaptionButtons="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="BorderThickness" Value="1"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                                        <Setter Property="BorderThickness" Value="{Binding Source={x:Static SystemParameters.WindowResizeBorderThickness}}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter Margin="5, 24, 5, 5"/>
                            </AdornerDecorator>
                            <DockPanel VerticalAlignment="Top" LastChildFill="False">
                                <DockPanel.Resources>
                                    <Style TargetType="Path">
                                        <Setter Property="Stroke" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                        <Setter Property="StrokeThickness" Value="1"/>
                                    </Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource WindowControlBtn}">
                                        <Setter Property="Width" Value="24"/>
                                        <Setter Property="Height" Value="14"/>
                                        <Setter Property="Margin" Value="0, 2, 1, 0"/>
                                        <Setter Property="VerticalAlignment" Value="Top"/>
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="DockPanel.Dock" Value="Right"/>
                                        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                    </Style>
                                    <Style TargetType="Button" x:Key="CloseBtn" BasedOn="{StaticResource WindowCloseBtn}">
                                        <Setter Property="Width" Value="24"/>
                                        <Setter Property="Height" Value="14"/>
                                        <Setter Property="Margin" Value="0, 2, 1, 0"/>
                                        <Setter Property="VerticalAlignment" Value="Top"/>
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="DockPanel.Dock" Value="Right"/>
                                        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                    </Style>
                                </DockPanel.Resources>
                                <TextBlock Margin="5, 2, 0, 0" VerticalAlignment="Center"
                                           DockPanel.Dock="Left" FontWeight="Bold"
                                           Foreground="{x:Static local:ThemeManager.FontBrush}"
                                           Text="{TemplateBinding Title}"/>
                                <Button Name="CloseBtn" Click="CloseBtn_Click" Style="{StaticResource CloseBtn}">
                                    <Button.Content>
                                        <Grid VerticalAlignment="Center" HorizontalAlignment="Center"
                                              Margin="0, 2, 0, 0">
                                            <Path Data="M1,1.5L 8,8.5" Margin="0"/>
                                            <Path Data="M1,8.5L 8,1.5" Margin="0"/>
                                        </Grid>
                                    </Button.Content>
                                </Button>
                                <Button Name="RestoreBtn" Click="RestoreBtn_Click">
                                    <Button.Content>
                                        <Rectangle Stroke="{x:Static local:ThemeManager.FontBrush}"
                                                   StrokeThickness="1" Width="10" Height="8"
                                                   Margin="0, 3, 0, 0"
                                                   VerticalAlignment="Center" 
                                                   HorizontalAlignment="Center"/>
                                    </Button.Content>
                                </Button>
                                <Button Name="MinimizeBtn" Click="MinimizeBtn_Click">
                                    <Button.Content>
                                        <Rectangle Stroke="{x:Static local:ThemeManager.FontBrush}"
                                                   StrokeThickness="1" Width="10" Height="1"
                                                   Margin="0, 6, 0, 0"
                                                   VerticalAlignment="Center" 
                                                   HorizontalAlignment="Center"/>
                                    </Button.Content>
                                </Button>
                            </DockPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="XPhotosDialog" TargetType="{x:Type Window}">
        <Setter Property="BorderBrush" Value="{x:Static local:ThemeManager.DialogWindowBrush}"/>
        <Setter Property="Background" Value="{x:Static local:ThemeManager.DialogWindowBrush}"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CornerRadius="6,6,6,6"
                    ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"
                    GlassFrameThickness="0" CaptionHeight="20"
                    NonClientFrameEdges="None"
                    UseAeroCaptionButtons="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="BorderThickness" Value="1"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                                        <Setter Property="BorderThickness" Value="{Binding Source={x:Static SystemParameters.WindowResizeBorderThickness}}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter Margin="5, 24, 5, 5"/>
                            </AdornerDecorator>
                            <DockPanel VerticalAlignment="Top" LastChildFill="False">
                                <DockPanel.Resources>
                                    <Style TargetType="Path">
                                        <Setter Property="Stroke" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                        <Setter Property="StrokeThickness" Value="1"/>
                                    </Style>
                                    <Style TargetType="Button" x:Key="CloseBtn" BasedOn="{StaticResource WindowCloseBtn}">
                                        <Setter Property="Width" Value="24"/>
                                        <Setter Property="Height" Value="14"/>
                                        <Setter Property="Margin" Value="0, 2, 1, 0"/>
                                        <Setter Property="VerticalAlignment" Value="Top"/>
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="DockPanel.Dock" Value="Right"/>
                                        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                    </Style>
                                </DockPanel.Resources>
                                <TextBlock Margin="5, 2, 0, 0" VerticalAlignment="Center"
                                           DockPanel.Dock="Left" FontWeight="Bold"
                                           Foreground="{x:Static local:ThemeManager.FontBrush}"
                                           Text="{TemplateBinding Title}"/>
                                <Button Name="CloseBtn" Click="CloseBtn_Click" Style="{StaticResource CloseBtn}">
                                    <Button.Content>
                                        <Grid VerticalAlignment="Center" HorizontalAlignment="Center"
                                              Margin="0, 2, 0, 0">
                                            <Path Data="M1,1.5L 8,8.5" Margin="0"/>
                                            <Path Data="M1,8.5L 8,1.5" Margin="0"/>
                                        </Grid>
                                    </Button.Content>
                                </Button>
                            </DockPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>